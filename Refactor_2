#include <iostream>
#include <random> 
#include <string>
using namespace std;

class IOTCloudCommunicator: public CloundInterface{
    public:
          int  pushMessage(string message){
              //Interact with internet and push the message to MessageQueue
            //if communiction succesfull return value from ramge {200 -400} status code otherwise returns errocode (400 - 500)
              std::random_device rd;
                std::mt19937 gen(rd());
                std::uniform_int_distribution<> distr(200, 500);
                return distr(gen);
            
          }

};
class BNFSpeedSensor: public SensorInterface
{
        public:
            int   getCurrentSpeed(){
                std::random_device rd;
                std::mt19937 gen(rd());
                std::uniform_int_distribution<> distr(1, 100);
                return distr(gen);
            }
};


class SensorInterface
{
  public:
      virtual int getCurrentSpeed() = 0;
      double convertToMph(int speedKmph)
      {
          return (speedKmph * 0.621371);
      }
};

class CloundInterface
{
    public:
    virtual int pushMessage(string) =0;
}


class SpeedMonitor{
    private : int _speedThreshold;
  
      public:
          SpeedMonitor ( int speedThreshold){
            _speedThreshold = speedThreshold;
          }
          
          int getSpeedThreshold(){
              return _speedThreshold;
          }
          
          bool isSpeedThresholdOutOfRange(){
            bool retVal = false;
            if(_speedThreshold  < 1 || _speedThreshold > 100){
              cout<<"_speedThreshold value must be in the ramge {1-100} "<<_speedThreshold<<endl;
              retVal = true;
            }
            
            return retVal;
          }
              
          bool speedMonitor (SensorInterface & sensorObj, CloundInterface&  cloudObj) {
                 int currentSpeed = sensorObj.getCurrentSpeed();
                 
                 cout<<"Current Speed In Kmph "<<currentSpeed<<endl;
                 
                 if(currentSpeedInKmph > _speedThreshold){
                      
                      return false;
                      cout << "Current speed is greater than Theshold"  << endl;
                 }
                 else
                 {
                       double mph = convertToMph(currentSpeed);
                       string message="Current Speed in Miles "+ to_string(mph);
                       
                       int statusCode= cloudObj.pushMessage(message);
                       
                        if(statusCode > 400){
                           //Log Message to Console
                           cout<<"Error In Communication Unable to Contact Server "<<message<< endl;
                        }
                      
                      return True;
                  }
                       
                 }
                 
            }
              
          }
};

int main(){
  
  BNFSpeedSensor speedSensorObj;
  IOTCloudCommunicator cloudObj;
  
  SpeedMonitor instance(10) ;
  bool isThresholdOutOfRange=  instance.isSpeedThresholdOutOfRange();
  if (isThresholdOutOfRange == false)
  {
      instance.monitor(speedSensorObj, cloudObj);
  }
}
